# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16ivJewqx1wq8hDxj_YOpCQvK5Hntacqx
"""

import tensorflow as tf
from tensorflow.keras.layers import Conv2D, MaxPooling2D, concatenate, Conv2DTranspose, Dropout
from tensorflow.keras import Model
import numpy as np
from tensorflow.keras.layers import Input
import matplotlib.pyplot as plt

def double_conv_block(x, num_filters):
    conv1 = Conv2D(num_filters, (3, 3), activation='relu', padding='same')(x)
    conv2 = Conv2D(num_filters, (3, 3), activation='relu', padding='same')(conv1)
    return conv2

def downsampling_block(x, num_filters, dropout):
    conv = double_conv_block(x, num_filters)
    pool = MaxPooling2D((2, 2))(conv)
    if dropout > 0:
        pool = Dropout(dropout)(pool)
    return conv, pool

def upsampling_block(x, skip_connection, num_filters):
    up = Conv2DTranspose(num_filters, (2, 2), strides=(2, 2), padding='same')(x)
    merge = concatenate([up, skip_connection], axis=3)
    conv = double_conv_block(merge, num_filters)
    return conv

def U_NET(width, height, channels, n_classes):
  # Encoder
  inputs = Input(shape=(width, height, channels))  # Input layer with specified shape

  # Downsample blocks
  f1, p1 = downsampling_block(inputs, 32,0.1)  # First downsampling block with 64 filters
  f2, p2 = downsampling_block(p1, 64,0.1)  # Second downsampling block with 128 filters
  f3, p3 = downsampling_block(p2, 128,0.1)  # Third downsampling block with 256 filters
  f4, p4 = downsampling_block(p3, 256,0.1)  # Fourth downsampling block with 512 filters
  f5, p5 = downsampling_block(p4, 512,0.1)

  # Bottleneck layer
  bottleneck = double_conv_block(p5, 1024)  # Bottleneck layer with 1024 filters

  # Decoder
  u6 = upsampling_block(bottleneck, f5, 512)  # First upsampling block with bottleneck, features from the fourth downsampling block, and 512 filters
  u7 = upsampling_block(u6, f4, 256)  # Second upsampling block with the previous upsampling block, features from the third downsampling block, and 256 filters
  u8 = upsampling_block(u7, f3, 128)  # Third upsampling block with the previous upsampling block, features from the second downsampling block, and 128 filters
  u9 = upsampling_block(u8, f2, 64)  # Fourth upsampling block with the previous upsampling block, features from the first downsampling block, and 64 filters
  u9 = upsampling_block(u9, f1, 32)

  # Output layer
  outputs = Conv2D(n_classes, 1, padding="same", activation="softmax")(u9)  # Convolutional layer for final output with specified number of classes

  unet_model = tf.keras.Model(inputs, outputs, name="U-Net")  # Create the U-Net model using the input and output layers

  return unet_model